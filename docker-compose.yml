version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rag-postgres
    environment:
      POSTGRES_DB: rag_db
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/monitoring/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user -d rag_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rag-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag-network

  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    container_name: rag-mlflow
    command: >
      bash -c "
        pip install mlflow[extras] psycopg2-binary &&
        mlflow server 
        --backend-store-uri postgresql://rag_user:rag_password@postgres:5432/rag_db
        --default-artifact-root ./mlruns
        --host 0.0.0.0
        --port 5000
      "
    volumes:
      - mlflow_data:/app/mlruns
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - rag-network

  # RAG Backend Application
  rag-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: rag-backend
    environment:
      - DATABASE_URL=postgresql://rag_user:rag_password@postgres:5432/rag_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT:-us-west1-gcp-free}
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - ENABLE_MLFLOW=true
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - rag-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: rag-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - rag-backend
    networks:
      - rag-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: rag-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./deployment/monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - rag-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mlflow_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  rag-network:
    driver: bridge
